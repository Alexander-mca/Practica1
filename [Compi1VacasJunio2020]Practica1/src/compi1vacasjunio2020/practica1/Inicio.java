/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compi1vacasjunio2020.practica1;

import compi1vacasjunio2020.practica1.Token.Tipo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;

import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.swing.plaf.windows.ClassicSortArrowIcon;

/**
 *
 * @author alexa
 */
public class Inicio extends javax.swing.JFrame {
LinkedList <Token> TablaSimbolos1=new LinkedList<>();
LinkedList <Token> Errores1=new LinkedList<>();
LinkedList <Token> TablaSimbolos2=new LinkedList<>();
LinkedList <Token> Errores2=new LinkedList<>();
LinkedList <Matriz> niveles=new LinkedList<>();
LinkedList <Pieza> Piezas=new LinkedList<>();
Item [][] CatalogoPiezas=new Item[7][4];


String archivo1,archivo2;
int nivel=0,piezajuego=0,puntuacion=0,rotacion=0;
    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        CrearCatalogo();
        
        
    }
    
    private void CrearCatalogo(){
        String letras[]={"i","j","l","o","s","z","t"};
        Tipo tipos[]={Tipo.arriba,Tipo.mayor,Tipo.abajo,Tipo.menor};
        for (int i = 0; i <7; i++) {
            for (int j = 0; j < 4; j++) {
                
                CatalogoPiezas[i][j]=new Item(new Pieza(letras[i],tipos[j]));
                CatalogoPiezas[i][j].CrearPieza();
            }
        }
    }
    private void RotarPieza(){
        Pieza pieza1=Piezas.get(piezajuego);
        rotacion++;
       
            if(rotacion>3){
                rotacion=0;
            }
            Item pieza2=EscogerPiezaCatalogo(pieza1.getPieza(), rotacion);
            if(pieza2!=null){
               RePaint();
               CargarPieza(pieza2);
               ActualizarNivel();            
            }
            
        
    }
    private void RePaint(){
        Matriz tablero=niveles.get(nivel);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < tablero.getY(); j++) {
                tablero.getMatriz()[i][j].setBackground(Color.black);
                tablero.getMatriz()[i][j].setVisible(false);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        punteo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelnivel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        idnivel = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        meta = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        paneljuego = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        jMenuItem5.setText("jMenuItem5");

        jMenuItem8.setText("jMenuItem8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 100));
        setResizable(false);

        jButton1.setText("Izquierda");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Derecha");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Rotar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Punteo:");

        jLabel3.setText("Nivel:");

        jLabel1.setText("Nombre:");

        jButton4.setText("Bajar Pieza");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Meta:");

        paneljuego.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout paneljuegoLayout = new javax.swing.GroupLayout(paneljuego);
        paneljuego.setLayout(paneljuegoLayout);
        paneljuegoLayout.setHorizontalGroup(
            paneljuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );
        paneljuegoLayout.setVerticalGroup(
            paneljuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneljuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                            .addComponent(jButton3)
                            .addGap(106, 106, 106))
                        .addGroup(panelLayout.createSequentialGroup()
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)))
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelLayout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                            .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(69, 69, 69)
                                            .addComponent(labelnivel)
                                            .addGap(64, 64, 64))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                            .addComponent(punteo)
                                            .addGap(72, 72, 72))))
                                .addGroup(panelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(idnivel)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                            .addComponent(meta, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(32, 32, 32)))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(97, 97, 97))))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(meta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(punteo)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelnivel)
                            .addComponent(jLabel3)
                            .addComponent(level))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(idnivel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(paneljuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(39, 39, 39))
        );

        jMenu1.setText("Abrir Archivos");

        jMenuItem1.setText("Archivo 1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Archivo 2");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analizar");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem3.setText("Archivo 1");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Archivo 2");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenu7.setText("Manual");
        jMenu3.add(jMenu7);

        jMenu8.setText("Acerca De");
        jMenu8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenu8);

        jMenuBar1.add(jMenu3);

        jMenu9.setText("Reportes");

        jMenu10.setText("Archivo 1");

        jMenuItem9.setText("Reporte Tokens");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem9);

        jMenuItem10.setText("Reporte Errores");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem10);

        jMenu9.add(jMenu10);

        jMenu11.setText("Archivo 2");

        jMenuItem11.setText("Reporte Tokens");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem11);

        jMenuItem12.setText("Reporte Errores");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem12);

        jMenu9.add(jMenu11);

        jMenuBar1.add(jMenu9);

        jMenu6.setText("Iniciar Juego");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenu6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu6ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        jMenu5.setText("Salir");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Abrir Archivo 2
        JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto *.pzs", "pzs"));
        int seleccion = fileChooser.showOpenDialog(this);
//        fileChooser.setDialogTitle("El exito es de quien persevera");
        if (seleccion == JFileChooser.APPROVE_OPTION){
            try{
                String aux="";
                String texto = "";
                File fichero = fileChooser.getSelectedFile(); 
//                archivos.add(fichero);
//                Archivo=fichero;
                String ruta=fileChooser.getSelectedFile().getAbsolutePath();
                if(ruta.endsWith(".pzs"))
                {     
                   FileReader archivos1=new FileReader(fichero);
                   BufferedReader lee=new BufferedReader(archivos1);
                   while((aux=lee.readLine())!=null)
                   {
                      texto+= aux+ "\n";
                   }
                    lee.close();
                        archivo2=texto;    
                         JOptionPane.showMessageDialog(null, "Archivo 2 cargado con exito.");
//                    pestañas.addTab(fichero.getName(), er);
                    
//                    comando1.setPreferredSize(new Dimension(630, 250));
//                    ObtenerCursor(comando1);
//                   AutoCompletar(comando1);
                
                }    

            }
            catch(IOException ex)
            {
              JOptionPane.showMessageDialog(null,ex+"" +
                    "\nNo se ha encontrado el archivo",
                          "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Abrir Archivo 1
         JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto *.trs", "trs"));
        int seleccion = fileChooser.showOpenDialog(this);
//        fileChooser.setDialogTitle("El exito es de quien persevera");
        if (seleccion == JFileChooser.APPROVE_OPTION){
            try{
                String aux="";
                String texto = "";
                File fichero = fileChooser.getSelectedFile(); 
//                archivos.add(fichero);
//                Archivo=fichero;
                String ruta=fileChooser.getSelectedFile().getAbsolutePath();
                if(ruta.endsWith(".trs"))
                {     
                   FileReader archivos1=new FileReader(fichero);
                   BufferedReader lee=new BufferedReader(archivos1);
                   while((aux=lee.readLine())!=null)
                   {
                      texto+= aux+ "\n";
                   }
                    lee.close();
                     archivo1=texto;
                     JOptionPane.showMessageDialog(null, "Archivo 1 cargado con exito.");
//                    pestañas.addTab(fichero.getName(), er);
                    
//                    comando1.setPreferredSize(new Dimension(630, 250));
//                    ObtenerCursor(comando1);
//                   AutoCompletar(comando1);
                
                }    

            }
            catch(IOException ex)
            {
              JOptionPane.showMessageDialog(null,ex+"" +
                    "\nNo se ha encontrado el archivo",
                          "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // analizador lexico del archivo 1
//        TablaSimbolos1.clear();
//        Errores1.clear();
//        niveles.clear();
//         if(archivo1!=null){
//             AnalizarArchivo1(archivo1);
//             if(!Errores1.isEmpty()){
//                 JOptionPane.showMessageDialog(null, "Existen errores Léxicos en el Archivo 1");
//                 return;
//             }
//             GeneracionMatrices();
//             
//         }
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Análisis léxico Archivo 2
        TablaSimbolos2.clear();
        Errores2.clear();
        Piezas.clear();
        if(archivo2!=null){            
            AnalizarArchivo2(archivo2);
            if(!Errores2.isEmpty()){
                 JOptionPane.showMessageDialog(null, "Existen errores Léxicos en el Archivo 2");
                 return;
            }
            GeneracionPiezas();
            JOptionPane.showMessageDialog(null, "El Archivo 2 ha sido analizado.");
            
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenu6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu6ActionPerformed
//        // Se prepara todo para jugar, se coloca el tablero y las piezas
//        if(niveles.isEmpty()  || Piezas.isEmpty()){
//            JOptionPane.showMessageDialog(null, "Los niveles o las piezas no han sido cargados");
//            return;
//        }
//        meta.setText("100");
//        Item pieza=EscogerPieza(piezajuego);
//        CargarPieza(pieza);
//         Niveles(0);
//         level.setText("0");
        
    }//GEN-LAST:event_jMenu6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // La pieza se mueve hacia la derecha
        for (int i = 0; i < 4; i++) {
            MoverDerecha();
        }
//        Niveles();
        ActualizarNivel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Cuando la pieza ya esta posicionada se baja(Bajar Pieza)
        Matriz tablero = niveles.get(nivel);
        Pieza piezaes = Piezas.get(piezajuego);
        Item pz1 = EscogerPiezaCatalogo(piezaes.getPieza(), rotacion);
        Pieza pzselect = pz1.getDatos();
        if (pzselect.getPieza().equals("l") && pzselect.getOrientacion().equals(Tipo.mayor)) {
            BajarPiezaLJ();
        } else if (pzselect.getPieza().equals("j") && pzselect.getOrientacion().equals(Tipo.menor)) {
            BajarPiezaLJ();
        } else {
            for (int i = 0; i < 4; i++) {
                //se baja la pieza
                BajarPieza();
            }
        }
        //se limpian filas totalmente pintadas, se añade un contador para analizar cuantos purntos ganó
        //         Niveles(nivel);
        int premio = LimpiarFilas();
        //por si luego de bajar filas puedan quedar filas llenas
        while (premio != 0) {

            //se bajan todas las filas
            for (int i = 4; i < tablero.getX(); i++) {
                BajarCuadros();
            }
            //se analiza cuantos puntos gana con esta jugada
            int punt1=Integer.parseInt(punteo.getText());
            switch (premio) {
                case 1:
                    puntuacion += 10;
                    punt1+=10;
                    break;
                case 2:
                    puntuacion += 15;
                    punt1+=15;
                    break;
                default:
                    puntuacion += 20;
                    punt1+=20;
                    break;
            }
            punteo.setText(String.valueOf(punt1));
            premio = LimpiarFilas();
        }
        //se revisa si el jugador perdió, si perdió se reinicia el nivel
        if(Perdiste(tablero)){
            JOptionPane.showMessageDialog(null, "Has perdido.");
            int punt=Integer.parseInt(punteo.getText());            
            puntuacion-=punt;
            GeneracionMatrices();
            piezajuego=0;
            Item pieza=EscogerPieza(piezajuego);
            CargarPieza(pieza);            
            Niveles();
            punteo.setText("0");
            return;
            
        }
        //se verifica si alcanzo el punteo maximo     
        int mt = Integer.parseInt(meta.getText());
        int punt = Integer.parseInt(punteo.getText());
        if (punt >= mt) {
            JOptionPane.showMessageDialog(null, "Nivel " + (nivel + 1) + " superado.");
            nivel++;
            piezajuego=0;
            Item pieza1=EscogerPieza(piezajuego);
            CargarPieza(pieza1);
            Niveles();
            puntuacion += punt;
            String nombre=niveles.get(nivel).getId();
            //se calcula la meta para el siguiente nivel
            mt = 2 * punt + 100;
            meta.setText(String.valueOf(mt));
            labelnivel.setText(String.valueOf(nivel+1));
            idnivel.setText(nombre);         
            
            punteo.setText("0");
        }
        if (niveles.size() == nivel) {
            int resp = JOptionPane.showConfirmDialog(null, "Has terminado el juego.\nObtuviste un total de " + puntuacion + " puntos.\n¿Quieres Volver a Jugar?", "Felicidades", JOptionPane.YES_NO_OPTION);
            //se reinicia el juego
            if (resp == 1) {
                nivel = 0;
                punteo.setText("0");
                Niveles();
                meta.setText("100");
            }
            return;
        }
        //se cargan ciclicamente las piezas
        piezajuego++;
        if (piezajuego == Piezas.size()) {
            piezajuego = 0;
        }
        Item pieza = EscogerPieza(piezajuego);
        CargarPieza(pieza);
//        Niveles();
        ActualizarNivel();
        

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // se rota la pieza
        RotarPieza();
//        Niveles();
//        ActualizarNivel();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Se mueve la pieza a la izquierda
        for (int i = 0; i <4; i++) {
            MoverIzquierda();
        }
//        Niveles();
          ActualizarNivel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // salir
        int resp = JOptionPane.showConfirmDialog(null, "¿Esta seguro que quiere cerrar el juego?", "Alerta", JOptionPane.YES_NO_OPTION);
        if(resp==1){
            this.dispose();
        }   
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Analisis archivo 1
         TablaSimbolos1.clear();
        Errores1.clear();
        niveles.clear();
         if(archivo1!=null){
             AnalizarArchivo1(archivo1);
             if(!Errores1.isEmpty()){
                 JOptionPane.showMessageDialog(null, "Existen errores Léxicos en el Archivo 1");
                 return;
             }
             GeneracionMatrices();
              JOptionPane.showMessageDialog(null, "El Archivo 1 ha sido analizado.");
             
         }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu8ActionPerformed
        // Acerca de
        JOptionPane.showMessageDialog(null, "Version: 1.0\nAutor:Alexander Morales Catalán\nCarné:201700539");
    }//GEN-LAST:event_jMenu8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // Reporte Tokens Archivo 1
        Reporte tokens1 = new Reporte();
        if (!TablaSimbolos1.isEmpty() && Errores1.isEmpty()) {
            tokens1.Colocar(TablaSimbolos1);
            tokens1.show();
            return;
        }
        JOptionPane.showMessageDialog(null, "No se puede abrir el reporte de Tokens del Archivo 1");
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
         // Reporte Errores Archivo 2
        Reporte errores2=new Reporte();
        if(!Errores2.isEmpty()){
           errores2.Colocar(Errores2);
           errores2.show();
         return;
        }
        JOptionPane.showMessageDialog(null, "No se puede abrir el Reporte de Errores del Archivo 2");
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
         // Reporte Tokens Archivo 2
        Reporte tokens2 = new Reporte();
        if (!TablaSimbolos2.isEmpty() && Errores2.isEmpty()) {
            tokens2.Colocar(TablaSimbolos2);
            tokens2.show();
            return;
        }
        JOptionPane.showMessageDialog(null, "No se puede abrir el reporte de Tokens del Archivo 2");
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // Reporte Errores Archivo 1
        Reporte errores1=new Reporte();
        if(!Errores1.isEmpty()){
           errores1.Colocar(Errores1);
           errores1.show();
         return;
        }
        JOptionPane.showMessageDialog(null, "No se puede abrir el Reporte de Errores del Archivo 1");
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
          // Se prepara todo para jugar, se coloca el tablero y las piezas
        if(niveles.isEmpty()  || Piezas.isEmpty()){
            JOptionPane.showMessageDialog(null, "Los niveles o las piezas no han sido cargados");
            return;
        }
        meta.setText("100");
        Item pieza=EscogerPieza(piezajuego);
        CargarPieza(pieza);
         Niveles();
         labelnivel.setText(String.valueOf(nivel+1));
         punteo.setText("0");
    }//GEN-LAST:event_jMenu6MouseClicked

private int LimpiarFilas(){
    int cantidad=0;
    Matriz tablero=niveles.get(nivel);
    for (int i = tablero.getX()-1; i >3; i--) {
        if(!filaLlena(i,0,tablero)){
            //verifica que toda la fila este llena, de no estar llena pasa a la sig fila
            continue;
        }
        for (int j = 0; j <tablero.getY(); j++) {
            //se colocan todos los cuadros de la fila en blanco, se limpian
            tablero.getMatriz()[i][j].setBackground(Color.white);
        }
        cantidad++;
            
    }
    return cantidad;
}
private boolean filaLlena(int i,int j,Matriz tablero){
    boolean validar=true;
    JButton cuadro=tablero.getMatriz()[i][j];
    if(CuadroVacio(cuadro)){
        return false;
    }
    j++;
    return validar&&filaLlena(i,j,tablero);
}
private void AnalizarArchivo1(String texto){
    String lexema="";
    int estado=0;
    int fila=1,columna=1;
    char c;
    for (int i = 0; i < texto.length(); i++) {
        c=texto.charAt(i);
        switch(estado){
            case 0:
                if(Character.isLetter(c)){
                    lexema+=c;
                    estado=1;
                }else if(Character.isDigit(c)){
                    lexema+=c;
                    estado=2;
                }else if(c=='#'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.numeral);  
                    TablaSimbolos1.add(tk);
                    estado=0;
                }else if(c=='-'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.guion);  
                    TablaSimbolos1.add(tk);
                    estado=0;
                }
                else if(c=='*'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.asterisco);
                    TablaSimbolos1.add(tk);
                }else if(c=='/'){
                    lexema+=c;
                    estado=3;
                }else if(c=='<'){
                    lexema+=c;
                    estado=4;
                }
                else if(c=='\n'){
                    columna=1;
                    fila++;
                }else if(c=='\b'|| c=='\t' || c=='\r'   || c==' '){
                    
                }else{
                    lexema+=c;
                    Token error=new Token(lexema,fila,columna,Token.Tipo.error);
                    Errores1.add(error);
                    lexema="";
                    estado=0;
                }
                break;
            case 1:
                if(!Character.isLetter(c) && !Character.isDigit(c) && c!='_'){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.id);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                    i--;
                    continue;
                }
                lexema+=c;
                estado=1;
                break;
            case 2:
                if(!Character.isDigit(c)){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.numero);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                    i--;
                    continue;
                }
                lexema+=c;
                estado=2;
                break;
            case 3:
                if(c=='/'){
                 lexema+=c;
                 estado=6;
            }
                break;
            case 4:
                if(c=='!'){
                    lexema+=c;
                    estado=7;
                }
                break;
            case 6:
                if(c=='\n'){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.ComentarioSimple);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                  
                    continue;
                }
                lexema+=c;
                estado=6;
                break;
            case 7:
                if(c=='!'){
                    lexema+=c;
                    estado=8;
                    continue;
                }
                lexema+=c;
                estado=7;
                break;
            case 8:
                if(c=='>'){
                    lexema+=c;
                     Token tk=new Token(lexema,fila,columna,Token.Tipo.ComentarioMult);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                }
                    
                    
                break;
        }
        columna++;
    }
}
private void AnalizarArchivo2(String texto){
        String lexema = "";
        int estado = 0;
        int fila = 1, columna = 1;
        char c;
        for (int i = 0; i < texto.length(); i++) {
            c = texto.charAt(i);
            switch (estado) {
                case 0:
                    if (Character.isLetter(c)) {
                        lexema= String.valueOf(c);
                        String letra=lexema.toLowerCase();
                        if (!letra.equals("i")&& !letra.equals("j") && !letra.equals("l") && !letra.equals("o") && !letra.equals("s")&& !letra.equals("z") && !letra.equals("t") && !letra.equals("v")) {
                            Token error = new Token(letra, fila, columna, Token.Tipo.error);
                            Errores2.add(error);
                            lexema = "";
                            estado = 0;
                            continue;
                        }
                        if (letra.equals("v")) {
                            Token tk = new Token(letra, fila, columna, Tipo.abajo);
                            TablaSimbolos2.add(tk);
                            lexema="";
                            estado = 0;
                            continue;
                        }
                        Token tk = new Token(letra, fila, columna, Tipo.id);
                        TablaSimbolos2.add(tk);
                        lexema="";
                        estado = 0;
                    } else if (c == ',') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.coma);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '/') {
                        lexema += c;
                        estado = 3;
                    } else if (c == '<') {
                        lexema += c;
                        estado = 4;
                    } else if (c == '>') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.mayor);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '^') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.arriba);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '\n') {
                        columna = 1;
                        fila++;
                    } else if (c == '\b' || c == '\t' || c == '\r' || c == ' ') {

                    } else {
                        lexema += c;
                        Token error = new Token(lexema, fila, columna, Token.Tipo.error);
                        Errores2.add(error);
                        lexema = "";
                        estado = 0;
                    }
                    break;

                case 3:
                    if (c == '/') {
                        lexema += c;
                        estado = 6;
                    }
                    break;
                case 4:
                    if (c != '!') {
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.menor);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;
                        i--;
                        continue;
                    }
                    lexema += c;
                    estado = 7;
                    break;
                case 6:
                    if (c == '\n') {
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.ComentarioSimple);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;

                        continue;
                    }
                    lexema += c;
                    estado = 6;
                    break;
                case 7:
                    if (c == '!') {
                        lexema += c;
                        estado = 8;
                        continue;
                    }
                    lexema += c;
                    estado = 7;
                    break;

                case 8:
                    if (c == '>') {
                        lexema += c;
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.ComentarioMult);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;
                    }

                    break;
            }
            columna++;
        }

    }
private void GeneracionMatrices(){
    if(!TablaSimbolos1.isEmpty()){
        for (int i=0;i<TablaSimbolos1.size();i++) {
            Token tk=TablaSimbolos1.get(i);
            Token tk1=TablaSimbolos1.get(i+1);
            Token tk2=TablaSimbolos1.get(i+2);
            if(!tk.tipo.equals(Tipo.numero) || !tk1.tipo.equals(Tipo.guion)){
                continue;
            }
            int x=Integer.parseInt(tk.lexema)+4;
            int y=Integer.parseInt(tk2.lexema);
            int cont=i+3;
            Token idmatriz=TablaSimbolos1.get(cont);
            //se busca el id de la matriz de juego
            while(!idmatriz.tipo.equals(Tipo.id)){
                cont++;
                idmatriz=TablaSimbolos1.get(cont);
            }
            Matriz matriz=new Matriz(x, y, idmatriz.lexema);
            cont++;
            //se encuentra el inicio de la matriz
            Token start=TablaSimbolos1.get(cont);
            while(!start.tipo.equals(Tipo.numeral) && !start.tipo.equals(Tipo.asterisco)){
                cont++;
                start=TablaSimbolos1.get(cont);
            }
            //se empieza a llenar la matriz con los datos
            for (int j = 0; j <x; j++) {
                for (int k = 0; k < y; k++) {
                    Token sim=TablaSimbolos1.get(cont);                    
                    matriz.getMatriz()[j][k]=new JButton();
                    matriz.getMatriz()[j][k].setSize(5,5);
                    if(j<4){
                        matriz.getMatriz()[j][k].setBackground(Color.black);
                        matriz.getMatriz()[j][k].setVisible(false);
                     continue;   
                    }
                    if(sim.tipo.equals(Tipo.asterisco)){                        
                        matriz.getMatriz()[j][k].setBackground(Color.yellow);                        
                    }else if(sim.tipo.equals(Tipo.numeral)){
                         matriz.getMatriz()[j][k].setBackground(Color.white);    
                    }
                    cont++;
                }
            }
            niveles.add(matriz);
            if(cont==TablaSimbolos1.size()){
                return;
            }
            i=cont-1;
        }
    }
}
private void GeneracionPiezas(){
    if(!TablaSimbolos2.isEmpty()){
        for (int i = 0; i <TablaSimbolos2.size(); i++) {
            Token pieza=TablaSimbolos2.get(i);
            if(!pieza.tipo.equals(Tipo.id)){
                continue;
            }
            Token orientacion=TablaSimbolos2.get(i+2);
            String pz=pieza.lexema.toLowerCase();
            Piezas.add(new Pieza(pz,orientacion.tipo));
        }
    }
}
private void ActualizarNivel(){     
  
     Matriz tablero=niveles.get(nivel);     
        
        for (int i = 0; i <tablero.getX(); i++) {
            for (int j = 0; j < tablero.getY(); j++) {
                 JButton cuadro1=tablero.getMatriz()[i][j];
                  
//                 Rectangle location=cuadro1.getBounds();
                 Point p=cuadro1.getLocation();
                 Object cuadro=paneljuego.getComponentAt(p);
                 if(cuadro instanceof JButton){
                  JButton buton=(JButton)cuadro;
                   Color color=cuadro1.getBackground();
                   buton.setBackground(color);
                 }
            }
            
        }
}
private void Niveles(){
//     paneljuego.repaint();
   
//     labelnivel.setText(String.valueOf(nivel+1));
//     punteo.setText(String.valueOf(puntos));
     
//     paneljuego.removeAll();  
     
     paneljuego.setBackground(Color.BLACK);
  
     Matriz tablero=niveles.get(nivel);
     idnivel.setText(tablero.getId());
        int x=170,y=40;
        paneljuego.setBounds(20, 20, 600, 800);
        for (int i = 0; i <tablero.getX(); i++) {
            for (int j = 0; j < tablero.getY(); j++) {
               niveles.get(nivel).getMatriz()[i][j].setBounds(x, y, 13, 13);
                niveles.get(nivel).getMatriz()[i][j].setLocation(x, y);
//               tablero.getMatriz()[i][j].setAlignmentY(y);
//               tablero.getMatriz()[i][j].setSize(13,13);
               paneljuego.add(tablero.getMatriz()[i][j]);
               x=x+14;
            }
            x=170;
            y=y+14;
        }
//        panel.add(paneljuego);
        
}
private Item EscogerPieza(int index){
    Item piezasel=null;
     if(!Piezas.isEmpty()){
        
        for (int i = 0; i < 7; i++) {
             Pieza pz=Piezas.get(index);
             Pieza pz2=CatalogoPiezas[i][0].getDatos();
            if(pz2.getPieza().equals(pz.getPieza())){
               for (int j = 0; j < 4; j++) {
                   Item m=CatalogoPiezas[i][j];
                   pz2= m.getDatos();
                   if(pz2.getOrientacion().equals(pz.getOrientacion())){
                       piezasel=m;
                       rotacion=j;
                       return piezasel;
                   }
                }
               
            }
            
        }
     }
     return piezasel;
}
private void CargarPieza(Item piezasel){
        //se escoge la pieza que necesitamos dentro de nuestro catalogo de piezas, ahi la buscamos
//       Item piezasel=EscogerPieza(index);       
        //se procede a colocar la pieza en el tablero        
        JButton[][] pieza = piezasel.getPieza();
        JButton[][] tablero = niveles.get(nivel).getMatriz();
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                JButton cuadro = pieza[i][j];
                if (cuadro == null) {
                    tablero[i][j].setVisible(false);
                    continue;
                }
//                JButton aux=tablero[i][j];
                
                tablero[i][j].setBackground(cuadro.getBackground());
                tablero[i][j].setVisible(true);
                

            }

        }
    }
private void BajarPiezaLJ(){
        Matriz tablero = niveles.get(nivel);
        int val = 1;
        int sigval = val + 1;
        boolean bajar = true;
        while (sigval < tablero.getX() - 1) {
            //para bajar una
            JButton actual=null,sig=null;
            
            for (int j = 0; j < tablero.getY() - 1; j++) {
                //para bajar la parte con solo un cuadro de la pieza
                actual = tablero.getMatriz()[sigval][j];
                sig = tablero.getMatriz()[sigval + 1][j];
                if (CuadroVacio(actual)) {
                    continue;
                }
                //para bajar las que solo tienen 1 cuadro
                Color aux = actual.getBackground();
                if (CuadroVacio(sig)) {
                    actual.setBackground(sig.getBackground());
                    sig.setBackground(aux);
                    break;
                }

            }
            for (int j = 0; j < tablero.getY() - 1; j++) {

                //aca se bajara la fila anterior
                JButton cuadro1 = tablero.getMatriz()[val][j];
                JButton cuadro2 = tablero.getMatriz()[val][j + 1];
                JButton sigc1 = tablero.getMatriz()[sigval][j];
                if (CuadroVacio(cuadro1)) {
                    continue;
                }
                //para bajar laa que solo tienen 1 cuadro
                Color colorc1 = cuadro1.getBackground();
                if (CuadroVacio(cuadro2)) {
                    continue;
                }
                JButton sigc2 = tablero.getMatriz()[sigval][j + 1];
                j++;
                if (j == tablero.getY() - 2) {
                    break;
                }
                //para bajar dos juntos
                Color aux2 = cuadro2.getBackground();
                JButton cuadro3 = tablero.getMatriz()[val][j + 1];
                if (CuadroVacio(cuadro3)) {
                    continue;
                }
                JButton sigc3 = tablero.getMatriz()[sigval][j + 1];
                j++;
                if (j == tablero.getY() - 3) {
                    break;
                }
                //para bajar piezas de 3 cuadros juntos
                Color aux3 = cuadro3.getBackground();
                bajar = CuadroVacio(sigc1) && CuadroVacio(sigc2) && CuadroVacio(sigc3);
                if (bajar) {
                    cuadro1.setBackground(sigc1.getBackground());
                    cuadro2.setBackground(sigc2.getBackground());
                    cuadro3.setBackground(sigc3.getBackground());
                    sigc1.setBackground(colorc1);
                    sigc2.setBackground(aux2);
                    sigc3.setBackground(aux3);
                }else {
                    if (actual != null && sig != null) {
                        Color aux = actual.getBackground();
                        actual.setBackground(sig.getBackground());
                        sig.setBackground(aux);
                        return;
                    }
                }

            }
            val++;
            sigval++;
        }
    }

private void BajarCuadros(){
    Matriz tablero = niveles.get(nivel);
        int limite1 = tablero.getX() - 1;
        for (int i = 0; i <tablero.getX(); i++) {
          if(i==limite1){
              return;
          }
            for (int j = 0; j < tablero.getY()-1; j++) {
                JButton actual = tablero.getMatriz()[i][j];
                JButton sig = tablero.getMatriz()[i + 1][j];
                if (CuadroVacio(actual)) {
                    continue;
                }
                if(!CuadroVacio(sig)){
                    continue;
                }
                Color aux=actual.getBackground();
                actual.setBackground(sig.getBackground());
                sig.setBackground(aux);
            }
    }
}
private Item EscogerPiezaCatalogo(String letra,int orientacion){
    Item pieza=null;
    
    for (int i = 0; i <7; i++) {
        Item pz1=CatalogoPiezas[i][orientacion];
        if(letra.equals(pz1.getDatos().getPieza())){
            pieza=pz1;
            return pieza;
        }
        
    }
    return pieza;
}
private void BajarPieza(){
        
        //se debe ejecutar 4 veces
        Matriz tablero = niveles.get(nivel);
        int limite1 = tablero.getX() - 1;
        for (int i = 0; i < tablero.getX(); i++) {
            if (i == limite1) {
                return;
            }
//         if(!SePuedeBajar(i,0,tablero)){
//             continue;
//         }
            for (int j = 0; j < tablero.getY() - 1; j++) {
                //se bajan las piezas

                JButton actual = tablero.getMatriz()[i][j];
                JButton der = tablero.getMatriz()[i][j + 1];
                JButton sig = tablero.getMatriz()[i + 1][j];
                if (CuadroVacio(actual)) {
                    continue;
                }
                //para bajar laa que solo tienen 1 cuadro
                Color aux = actual.getBackground();
                if (CuadroVacio(der)) {
                    if (CuadroVacio(sig)) {                        
                        actual.setBackground(sig.getBackground());
                        sig.setBackground(aux);
//                tablero.getMatriz()[i][j]=actual;
//                tablero.getMatriz()[i+1][j]=sig;
                    }
                    continue;
                }
                JButton dersig = tablero.getMatriz()[i + 1][j + 1];
                j++;
                if (j == tablero.getY() - 2) {
                    continue;
                }
                //para bajar dos juntos
                Color aux2 = der.getBackground();
                JButton cuadro3 = tablero.getMatriz()[i][j + 1];
                if (CuadroVacio(cuadro3)) {
                    if (CuadroVacio(sig) && CuadroVacio(dersig)) {
                        
                        
                        actual.setBackground(sig.getBackground());
                        der.setBackground(dersig.getBackground());
                        sig.setBackground(aux);
                        dersig.setBackground(aux2);
                    }
                    continue;
                }
                JButton sigc3 = tablero.getMatriz()[i + 1][j + 1];
                j++;
                if (j == tablero.getY() - 3) {
                    continue;
                }
                //para bajar piezas de 3 cuadros juntos
                Color aux3=cuadro3.getBackground();
                JButton cuadro4 = tablero.getMatriz()[i][j + 1];
                if (CuadroVacio(cuadro4)) {
                    if(CuadroVacio(sig)&& CuadroVacio(dersig)&&CuadroVacio(sigc3)){
                    
                    
                    actual.setBackground(sig.getBackground());
                    der.setBackground(dersig.getBackground());
                    cuadro3.setBackground(sigc3.getBackground());
                    sig.setBackground(aux);
                    dersig.setBackground(aux2);                  
                    sigc3.setBackground(aux3);
                    }
                    continue;
                }
                //para bajar 4 cuadros
                Color aux4=cuadro4.getBackground();
                JButton sigc4=tablero.getMatriz()[i+1][j+1];
                j++;
                if(CuadroVacio(sig)&&CuadroVacio(dersig)&&CuadroVacio(sigc3)&&CuadroVacio(sigc4)){
                     actual.setBackground(sig.getBackground());
                    der.setBackground(dersig.getBackground());
                    cuadro3.setBackground(sigc3.getBackground());
                    cuadro4.setBackground(sigc4.getBackground());
                    sig.setBackground(aux);
                    dersig.setBackground(aux2);                  
                    sigc3.setBackground(aux3);
                    sigc4.setBackground(aux4);
                }
            }
        }
    }
private boolean Perdiste(Matriz tablero){    
    for (int i = 0; i <tablero.getY(); i++) {
        JButton aux=tablero.getMatriz()[4][i];
        if(!CuadroVacio(aux)){
            return true;
        }
    }
    return false;
}
private boolean SePuedeBajar(int i,int j,Matriz tablero){
    //se verifica que todos los bloques pintados en la fila se puedan bajar
    boolean valido=true;
     JButton actual=tablero.getMatriz()[i][j];
     JButton sig=tablero.getMatriz()[i+1][j];
      if(!CuadroVacio(actual) && !CuadroVacio(sig)){
          valido=false;          
      }
      
      
      if(j<(tablero.getY()-1)){
          j++;
         return valido&&SePuedeBajar(i,j,tablero);
      }
    return valido;
}
private void MoverDerecha(){
    Matriz tablero=niveles.get(nivel);
    int limiteY=tablero.getY()-1;
    for (int j = 0; j <tablero.getY(); j++) {
        if(limiteY==j){
            return;
        }
        if(!SePuedeMover(0,j,tablero,true)){
            continue;
        }
        for (int i = 0; i<tablero.getX(); i++) {
            //se mueven las piezas a la derecha
            JButton actual = tablero.getMatriz()[i][j];
            JButton sig = tablero.getMatriz()[i][j + 1];
            Color aux = actual.getBackground();
            actual.setBackground(sig.getBackground());
            sig.setBackground(aux);
//            tablero.getMatriz()[i][j] = actual;
//            tablero.getMatriz()[i][j+1] = sig;
        }
            
            
    }
}
private void MoverIzquierda(){
     Matriz tablero=niveles.get(nivel);
    
    for (int j = tablero.getY(); j>=0; j++) {
        if(j==0){
            return;
        }
        if(!SePuedeMover(0,j,tablero,false)){
            continue;
        }
        for (int i = 0; i<tablero.getX(); i++) {
            //se mueven las piezas a la derecha
            JButton actual = tablero.getMatriz()[i][j];
            JButton sig = tablero.getMatriz()[i][j - 1];
            Color aux = actual.getBackground();
            actual.setBackground(sig.getBackground());
            sig.setBackground(aux);
//            tablero.getMatriz()[i][j] = actual;
//            tablero.getMatriz()[i][j-1] = sig;
        }
            
            
    }
}
private boolean SePuedeMover(int i,int j, Matriz tablero,boolean der){
    boolean valido = true;
    int m;
    if (der) {
        m = j + 1;
    } else {
        m = j - 1;
    }
    JButton actual = tablero.getMatriz()[i][j];
    JButton sig = tablero.getMatriz()[i][m];
    if (!CuadroVacio(actual) && !CuadroVacio(sig)) {
        valido = false;
    }

    if (i < 4) {
        i++;
        return valido && SePuedeBajar(i, j, tablero);
    }
    return valido;
}
private boolean CuadroVacio(JButton cuadro){
    boolean val=false;
    if(cuadro.getBackground().equals(Color.black) || cuadro.getBackground().equals(Color.white)){
        val=true;
    }
    return val;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel idnivel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JLabel labelnivel;
    private javax.swing.JLabel level;
    private javax.swing.JLabel meta;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel paneljuego;
    private javax.swing.JLabel punteo;
    // End of variables declaration//GEN-END:variables
}
