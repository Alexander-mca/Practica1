/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compi1vacasjunio2020.practica1;

import compi1vacasjunio2020.practica1.Token.Tipo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;

import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author alexa
 */
public class Inicio extends javax.swing.JFrame {
LinkedList <Token> TablaSimbolos1=new LinkedList<>();
LinkedList <Token> Errores1=new LinkedList<>();
LinkedList <Token> TablaSimbolos2=new LinkedList<>();
LinkedList <Token> Errores2=new LinkedList<>();
LinkedList <Matriz> niveles=new LinkedList<>();
LinkedList <Pieza> Piezas=new LinkedList<>();
Item [][] CatalogoPiezas=new Item[7][4];
JPanel paneljuego=new JPanel();

String archivo1,archivo2;
int nivel=0;
    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        CrearCatalogo();
    }
    
    private void CrearCatalogo(){
        String letras[]={"i","j","l","o","s","z","t"};
        Tipo tipos[]={Tipo.arriba,Tipo.mayor,Tipo.abajo,Tipo.menor};
        for (int i = 0; i <7; i++) {
            for (int j = 0; j < 4; j++) {
                
                CatalogoPiezas[i][j]=new Item(new Pieza(letras[i],tipos[j]));
                CatalogoPiezas[i][j].CrearPieza();
            }
        }
    }
    private void RotarPieza(){
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        panel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        jMenuItem5.setText("jMenuItem5");

        jMenuItem8.setText("jMenuItem8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 719, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );

        jMenu1.setText("Abrir Archivos");

        jMenuItem1.setText("Archivo 1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Archivo 2");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analizar");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem3.setText("Archivo 1");
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Archivo 2");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Instrucciones");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Reportes");

        jMenuItem6.setText("Reporte de Tokens");
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Reporte de Errores");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        jMenu6.setText("Jugar");
        jMenu6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu6ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        jMenu5.setText("Salir");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Abrir Archivo 2
        JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto *.pzs", "pzs"));
        int seleccion = fileChooser.showOpenDialog(this);
//        fileChooser.setDialogTitle("El exito es de quien persevera");
        if (seleccion == JFileChooser.APPROVE_OPTION){
            try{
                String aux="";
                String texto = "";
                File fichero = fileChooser.getSelectedFile(); 
//                archivos.add(fichero);
//                Archivo=fichero;
                String ruta=fileChooser.getSelectedFile().getAbsolutePath();
                if(ruta.endsWith(".NM"))
                {     
                   FileReader archivos1=new FileReader(fichero);
                   BufferedReader lee=new BufferedReader(archivos1);
                   while((aux=lee.readLine())!=null)
                   {
                      texto+= aux+ "\n";
                   }
                    lee.close();
                        archivo2=texto;            
//                    pesta√±as.addTab(fichero.getName(), er);
                    
//                    comando1.setPreferredSize(new Dimension(630, 250));
//                    ObtenerCursor(comando1);
//                   AutoCompletar(comando1);
                
                }    

            }
            catch(IOException ex)
            {
              JOptionPane.showMessageDialog(null,ex+"" +
                    "\nNo se ha encontrado el archivo",
                          "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Abrir Archivo 1
         JFileChooser fileChooser = new JFileChooser();
         fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de texto *.trs", "trs"));
        int seleccion = fileChooser.showOpenDialog(this);
//        fileChooser.setDialogTitle("El exito es de quien persevera");
        if (seleccion == JFileChooser.APPROVE_OPTION){
            try{
                String aux="";
                String texto = "";
                File fichero = fileChooser.getSelectedFile(); 
//                archivos.add(fichero);
//                Archivo=fichero;
                String ruta=fileChooser.getSelectedFile().getAbsolutePath();
                if(ruta.endsWith(".NM"))
                {     
                   FileReader archivos1=new FileReader(fichero);
                   BufferedReader lee=new BufferedReader(archivos1);
                   while((aux=lee.readLine())!=null)
                   {
                      texto+= aux+ "\n";
                   }
                    lee.close();
                     archivo1=texto;               
//                    pesta√±as.addTab(fichero.getName(), er);
                    
//                    comando1.setPreferredSize(new Dimension(630, 250));
//                    ObtenerCursor(comando1);
//                   AutoCompletar(comando1);
                
                }    

            }
            catch(IOException ex)
            {
              JOptionPane.showMessageDialog(null,ex+"" +
                    "\nNo se ha encontrado el archivo",
                          "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // analizador lexico del archivo 1
        TablaSimbolos1.clear();
        Errores1.clear();
        niveles.clear();
         if(archivo1!=null){
             AnalizarArchivo1(archivo1);
             if(!Errores1.isEmpty()){
                 JOptionPane.showMessageDialog(null, "Existen errores L√©xicos en el Archivo 1");
                 return;
             }
             GeneracionMatrices();
             
         }
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // An√°lisis l√©xico Archivo 2
        TablaSimbolos2.clear();
        Errores2.clear();
        Piezas.clear();
        if(archivo2!=null){            
            AnalizarArchivo2(archivo2);
            if(!Errores2.isEmpty()){
                 JOptionPane.showMessageDialog(null, "Existen errores L√©xicos en el Archivo 2");
                 return;
            }
            GeneracionPiezas();
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenu6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu6ActionPerformed
        // Se prepara todo para jugar, se coloca el tablero y las piezas
        if(niveles.isEmpty()  || Piezas.isEmpty()){
            JOptionPane.showMessageDialog(null, "Los niveles o las piezas no han sido cargados");
            return;
        }
        Niveles();
        
    }//GEN-LAST:event_jMenu6ActionPerformed
private void AnalizarArchivo1(String texto){
    String lexema="";
    int estado=0;
    int fila=1,columna=1;
    char c;
    for (int i = 0; i < texto.length(); i++) {
        c=texto.charAt(i);
        switch(estado){
            case 0:
                if(Character.isLetter(c)){
                    lexema+=c;
                    estado=1;
                }else if(Character.isDigit(c)){
                    lexema+=c;
                    estado=2;
                }else if(c=='#'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.numeral);  
                    TablaSimbolos1.add(tk);
                    estado=0;
                }else if(c=='-'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.guion);  
                    TablaSimbolos1.add(tk);
                    estado=0;
                }
                else if(c=='*'){
                    Token tk=new Token(String.valueOf(c),fila,columna, Token.Tipo.asterisco);
                    TablaSimbolos1.add(tk);
                }else if(c=='/'){
                    lexema+=c;
                    estado=3;
                }else if(c=='<'){
                    lexema+=c;
                    estado=4;
                }
                else if(c=='\n'){
                    columna=1;
                    fila++;
                }else if(c=='\b'|| c=='\t' || c=='\r'   || c==' '){
                    
                }else{
                    lexema+=c;
                    Token error=new Token(lexema,fila,columna,Token.Tipo.error);
                    Errores1.add(error);
                    lexema="";
                    estado=0;
                }
                break;
            case 1:
                if(!Character.isLetterOrDigit(c) || c!='_'){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.id);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                    i--;
                    continue;
                }
                lexema+=c;
                estado=1;
                break;
            case 2:
                if(!Character.isDigit(c)){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.numero);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                    i--;
                    continue;
                }
                lexema+=c;
                estado=2;
                break;
            case 3:
                if(c=='/'){
                 lexema+=c;
                 estado=6;
            }
                break;
            case 4:
                if(c=='!'){
                    lexema+=c;
                    estado=7;
                }
                break;
            case 6:
                if(c=='\n'){
                    Token tk=new Token(lexema,fila,columna,Token.Tipo.ComentarioSimple);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                  
                    continue;
                }
                lexema+=c;
                estado=6;
                break;
            case 7:
                if(c=='!'){
                    lexema+=c;
                    estado=8;
                    continue;
                }
                lexema+=c;
                estado=7;
                break;
            case 8:
                if(c=='>'){
                    lexema+=c;
                     Token tk=new Token(lexema,fila,columna,Token.Tipo.ComentarioMult);
                    TablaSimbolos1.add(tk);
                    lexema="";
                    estado=0;
                }
                    
                    
                break;
        }
        columna++;
    }
}
private void AnalizarArchivo2(String texto){
        String lexema = "";
        int estado = 0;
        int fila = 1, columna = 1;
        char c;
        for (int i = 0; i < texto.length(); i++) {
            c = texto.charAt(i);
            switch (estado) {
                case 0:
                    if (Character.isLetter(c)) {
                        if (c == 'v') {
                            Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.abajo);
                            TablaSimbolos2.add(tk);
                            estado = 0;
                            continue;
                        }
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.id);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == ',') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.coma);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '/') {
                        lexema += c;
                        estado = 3;
                    } else if (c == '<') {
                        lexema += c;
                        estado = 4;
                    } else if (c == '>') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.mayor);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '^') {
                        Token tk = new Token(String.valueOf(c), fila, columna, Token.Tipo.arriba);
                        TablaSimbolos2.add(tk);
                        estado = 0;
                    } else if (c == '\n') {
                        columna = 1;
                        fila++;
                    } else if (c == '\b' || c == '\t' || c == '\r' || c == ' ') {

                    } else {
                        lexema += c;
                        Token error = new Token(lexema, fila, columna, Token.Tipo.error);
                        Errores2.add(error);
                        lexema = "";
                        estado = 0;
                    }
                    break;

                case 3:
                    if (c == '/') {
                        lexema += c;
                        estado = 6;
                    }
                    break;
                case 4:
                    if (c != '!') {
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.menor);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;
                        i--;
                        continue;
                    }
                    lexema += c;
                    estado = 7;
                    break;
                case 6:
                    if (c == '\n') {
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.ComentarioSimple);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;

                        continue;
                    }
                    lexema += c;
                    estado = 6;
                    break;
                case 7:
                    if (c == '!') {
                        lexema += c;
                        estado = 8;
                        continue;
                    }
                    lexema += c;
                    estado = 7;
                    break;

                case 8:
                    if (c == '>') {
                        lexema += c;
                        Token tk = new Token(lexema, fila, columna, Token.Tipo.ComentarioMult);
                        TablaSimbolos2.add(tk);
                        lexema = "";
                        estado = 0;
                    }

                    break;
            }
        }

    }
private void GeneracionMatrices(){
    if(!TablaSimbolos1.isEmpty()){
        for (int i=0;i<TablaSimbolos1.size();i++) {
            Token tk=TablaSimbolos1.get(i);
            Token tk1=TablaSimbolos1.get(i+1);
            Token tk2=TablaSimbolos1.get(i+2);
            if(!tk.tipo.equals(Tipo.numero) && !tk1.tipo.equals(Tipo.guion)){
                continue;
            }
            int x=Integer.parseInt(tk.lexema);
            int y=Integer.parseInt(tk2.lexema);
            int cont=i+3;
            Token idmatriz=TablaSimbolos1.get(cont);
            //se busca el id de la matriz de juego
            while(!idmatriz.tipo.equals(Tipo.id)){
                cont++;
                idmatriz=TablaSimbolos1.get(cont);
            }
            Matriz matriz=new Matriz(x, y, idmatriz.lexema);
            cont++;
            //se encuentra el inicio de la matriz
            Token start=TablaSimbolos1.get(cont);
            while(!start.tipo.equals(Tipo.numeral) || !start.tipo.equals(Tipo.asterisco)){
                cont++;
                start=TablaSimbolos1.get(cont);
            }
            //se empieza a llenar la matriz con los datos
            for (int j = 0; j <x; j++) {
                for (int k = 0; k < y; k++) {
                    Token sim=TablaSimbolos1.get(cont);                    
                    matriz.matriz[j][k]=new JLabel();
                    matriz.matriz[j][k].setSize(5,5);
                    if(sim.tipo.equals(Tipo.asterisco)){                        
                        matriz.matriz[j][k].setBackground(Color.orange);                        
                    }else if(sim.tipo.equals(Tipo.numeral)){
                         matriz.matriz[j][k].setBackground(Color.white);    
                    }
                    cont++;
                }
            }
            niveles.add(matriz);
            i=cont;
        }
    }
}
private void GeneracionPiezas(){
    if(!TablaSimbolos2.isEmpty()){
        for (int i = 0; i <TablaSimbolos2.size(); i++) {
            Token pieza=TablaSimbolos2.get(i);
            if(!pieza.tipo.equals(Tipo.id)){
                continue;
            }
            Token orientacion=TablaSimbolos2.get(i+2);
            String pz=pieza.lexema.toLowerCase();
            Piezas.add(new Pieza(pz,orientacion.tipo));
        }
    }
}
private void Niveles(){
//     paneljuego.repaint();
     paneljuego.removeAll();
     Matriz tablero=niveles.get(nivel);
        int x=20,y=50;
        paneljuego.setBounds(15, 40, tablero.getX()*6, tablero.getY()*6);
        for (int i = 0; i <tablero.getX(); i++) {
            for (int j = 0; j < tablero.getY(); j++) {
               tablero.matriz[i][j].setBounds(x, y, 5, 5);
               paneljuego.add(tablero.matriz[i][j]);
               x=x+5;
            }
            y=y+5;
        }
        panel.add(paneljuego);
        
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
}
